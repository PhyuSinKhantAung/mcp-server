{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasic}}
import { Buffer } from 'buffer';
{{/isBasic}}
{{#isApiKey}}
// API Key authentication
{{/isApiKey}}
{{#isOAuth}}
// OAuth2 authentication
{{/isOAuth}}
{{/authMethods}}

export function getAuthConfig() {
  {{#authMethods}}
  {{#isBasic}}
  const username = process.env.{{envPrefix}}_USERNAME;
  const password = process.env.{{envPrefix}}_PASSWORD;
  if (!username || !password) {
    return null;
  }
  return {
    type: 'basic',
    value: 'Basic ' + Buffer.from(`${username}:${password}`).toString('base64')
  };
  {{/isBasic}}
  {{#isApiKey}}
  const apiKey = process.env.{{envPrefix}}_API_KEY;
  if (!apiKey) {
    return null;
  }
  return {
    type: 'apiKey',
    {{#isKeyInQuery}}
    paramName: '{{keyParamName}}',
    location: 'query',
    {{/isKeyInQuery}}
    {{#isKeyInHeader}}
    headerName: '{{keyParamName}}',
    location: 'header',
    {{/isKeyInHeader}}
    value: apiKey
  };
  {{/isApiKey}}
  {{#isOAuth}}
  const accessToken = process.env.{{envPrefix}}_ACCESS_TOKEN;
  if (!accessToken) {
    return null;
  }
  return {
    type: 'oauth',
    value: `Bearer ${accessToken}`
  };
  {{/isOAuth}}
  {{/authMethods}}
}

export function getApiInstance() {
  const authConfig = getAuthConfig();
  if (!authConfig) {
    return null;
  }
  
  {{#hasMore}}
  // API client initialization will be added here
  return null;
  {{/hasMore}}
  {{^hasMore}}
  // Basic HTTP client setup
  return {
    authConfig,
    baseUrl: '{{basePath}}'
  };
  {{/hasMore}}
}
{{/hasAuthMethods}}
{{^hasAuthMethods}}
export function getAuthConfig() {
  return null;
}

export function getApiInstance() {
  return {
    baseUrl: '{{basePath}}'
  };
}
{{/hasAuthMethods}}
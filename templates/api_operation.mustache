import { z } from "zod";
import { formatResponse } from "../utils/response.js";
import { getApiInstance } from "../utils/auth.js";

export default {
  name: "{{operationId}}",
  schema: {
    title: "{{summary}}",
    description: "{{notes}}",{{#hasParams}}
    inputSchema: {
      {{#allParams}}
      {{paramName}}: z.{{#isString}}string(){{/isString}}{{#isBoolean}}boolean(){{/isBoolean}}{{#isNumeric}}number(){{/isNumeric}}{{#hasMore}}.{{/hasMore}}{{^required}}optional(){{/required}},
      {{/allParams}}
    },{{/hasParams}}
  },
  handler: async ({{#hasParams}}{ {{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}} }{{/hasParams}}) => {
    try {
      const apiInstance = getApiInstance();
      if (!apiInstance) {
        return formatResponse({
          type: "error",
          message: "{{operationId}} failed: No authentication provided",
        });
      }

      {{#hasParams}}
      {{#hasBodyParam}}
      const requestBody = {
        {{#bodyParams}}
        {{#hasMore}}{{paramName}},{{/hasMore}}
        {{^hasMore}}{{paramName}}{{/hasMore}}
        {{/bodyParams}}
      };
      // Remove undefined fields
      Object.keys(requestBody).forEach(
        (key) => requestBody[key] === undefined && delete requestBody[key]
      );
      {{/hasBodyParam}}
      {{/hasParams}}

      // TODO: Implement actual API call
      // const response = await apiInstance.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
      
      return formatResponse({
        message: "{{operationId}} executed successfully",
        data: { message: "API call not yet implemented" }
      });
    } catch (error) {
      console.error(error);
      return formatResponse({
        type: "error",
        message: `{{operationId}} failed: ${error.message || JSON.stringify(error)}`,
      });
    }
  },
};
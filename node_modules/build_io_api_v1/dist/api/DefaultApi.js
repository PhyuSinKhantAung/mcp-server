"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ApiV1AppsIdBuildsPostRequest = _interopRequireDefault(require("../model/ApiV1AppsIdBuildsPostRequest"));
var _ApiV1MeGet200Response = _interopRequireDefault(require("../model/ApiV1MeGet200Response"));
var _ApiV1OidcLoginGet200Response = _interopRequireDefault(require("../model/ApiV1OidcLoginGet200Response"));
var _App = _interopRequireDefault(require("../model/App"));
var _CreateAppRequest = _interopRequireDefault(require("../model/CreateAppRequest"));
var _CreateNamespaceRequest = _interopRequireDefault(require("../model/CreateNamespaceRequest"));
var _Dyno = _interopRequireDefault(require("../model/Dyno"));
var _Namespace = _interopRequireDefault(require("../model/Namespace"));
var _Team = _interopRequireDefault(require("../model/Team"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Build.io API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
var DefaultApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DefaultApi. 
  * @alias module:api/DefaultApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DefaultApi(apiClient) {
    _classCallCheck(this, DefaultApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * create build
   * @param {String} id app id or name
   * @param {Object} opts Optional parameters
   * @param {module:model/ApiV1AppsIdBuildsPostRequest} [apiV1AppsIdBuildsPostRequest] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  return _createClass(DefaultApi, [{
    key: "apiV1AppsIdBuildsPostWithHttpInfo",
    value: function apiV1AppsIdBuildsPostWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = opts['apiV1AppsIdBuildsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AppsIdBuildsPost");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/apps/{id}/builds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create build
     * @param {String} id app id or name
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AppsIdBuildsPostRequest} opts.apiV1AppsIdBuildsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "apiV1AppsIdBuildsPost",
    value: function apiV1AppsIdBuildsPost(id, opts) {
      return this.apiV1AppsIdBuildsPostWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiV1MeGet200Response} and HTTP response
     */
  }, {
    key: "apiV1MeGetWithHttpInfo",
    value: function apiV1MeGetWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiV1MeGet200Response["default"];
      return this.apiClient.callApi('/api/v1/me', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiV1MeGet200Response}
     */
  }, {
    key: "apiV1MeGet",
    value: function apiV1MeGet() {
      return this.apiV1MeGetWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * kubernetes oidc-login
     * @param {Object} opts Optional parameters
     * @param {String} [region] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiV1OidcLoginGet200Response} and HTTP response
     */
  }, {
    key: "apiV1OidcLoginGetWithHttpInfo",
    value: function apiV1OidcLoginGetWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'region': opts['region']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['api_key', 'bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApiV1OidcLoginGet200Response["default"];
      return this.apiClient.callApi('/api/v1/oidc-login', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * kubernetes oidc-login
     * @param {Object} opts Optional parameters
     * @param {String} opts.region 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiV1OidcLoginGet200Response}
     */
  }, {
    key: "apiV1OidcLoginGet",
    value: function apiV1OidcLoginGet(opts) {
      return this.apiV1OidcLoginGetWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show app
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/App} and HTTP response
     */
  }, {
    key: "appWithHttpInfo",
    value: function appWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling app");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _App["default"];
      return this.apiClient.callApi('/api/v1/apps/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show app
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/App}
     */
  }, {
    key: "app",
    value: function app(id) {
      return this.appWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list apps
     * List all apps
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] team id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/App>} and HTTP response
     */
  }, {
    key: "appsWithHttpInfo",
    value: function appsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'team_id': opts['teamId']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_App["default"]];
      return this.apiClient.callApi('/api/v1/apps', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list apps
     * List all apps
     * @param {Object} opts Optional parameters
     * @param {String} opts.teamId team id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/App>}
     */
  }, {
    key: "apps",
    value: function apps(opts) {
      return this.appsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list all config-vars
     * @param {String} appIdOrName app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
  }, {
    key: "configVarsWithHttpInfo",
    value: function configVarsWithHttpInfo(appIdOrName) {
      var postBody = null;
      // verify the required parameter 'appIdOrName' is set
      if (appIdOrName === undefined || appIdOrName === null) {
        throw new Error("Missing the required parameter 'appIdOrName' when calling configVars");
      }
      var pathParams = {
        'app_id_or_name': appIdOrName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {
        'String': 'String'
      };
      return this.apiClient.callApi('/api/v1/apps/{app_id_or_name}/config-vars', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list all config-vars
     * @param {String} appIdOrName app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
  }, {
    key: "configVars",
    value: function configVars(appIdOrName) {
      return this.configVarsWithHttpInfo(appIdOrName).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * create app
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAppRequest} [createAppRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/App} and HTTP response
     */
  }, {
    key: "createAppWithHttpInfo",
    value: function createAppWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['createAppRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _App["default"];
      return this.apiClient.callApi('/api/v1/apps', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create app
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAppRequest} opts.createAppRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/App}
     */
  }, {
    key: "createApp",
    value: function createApp(opts) {
      return this.createAppWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * create a namespace
     * Create a namespace
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNamespaceRequest} [createNamespaceRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Namespace} and HTTP response
     */
  }, {
    key: "createNamespaceWithHttpInfo",
    value: function createNamespaceWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['createNamespaceRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Namespace["default"];
      return this.apiClient.callApi('/api/v1/namespaces', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create a namespace
     * Create a namespace
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNamespaceRequest} opts.createNamespaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Namespace}
     */
  }, {
    key: "createNamespace",
    value: function createNamespace(opts) {
      return this.createNamespaceWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete config-var
     * Delete a config-var
     * @param {String} appIdOrName app id or name
     * @param {String} key config var key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "deleteConfigVarWithHttpInfo",
    value: function deleteConfigVarWithHttpInfo(appIdOrName, key) {
      var postBody = null;
      // verify the required parameter 'appIdOrName' is set
      if (appIdOrName === undefined || appIdOrName === null) {
        throw new Error("Missing the required parameter 'appIdOrName' when calling deleteConfigVar");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteConfigVar");
      }
      var pathParams = {
        'app_id_or_name': appIdOrName,
        'key': key
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/apps/{app_id_or_name}/config-vars/{key}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete config-var
     * Delete a config-var
     * @param {String} appIdOrName app id or name
     * @param {String} key config var key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteConfigVar",
    value: function deleteConfigVar(appIdOrName, key) {
      return this.deleteConfigVarWithHttpInfo(appIdOrName, key).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete a namespace
     * Delete a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "deleteNamespaceWithHttpInfo",
    value: function deleteNamespaceWithHttpInfo(namespaceIdOrName) {
      var postBody = null;
      // verify the required parameter 'namespaceIdOrName' is set
      if (namespaceIdOrName === undefined || namespaceIdOrName === null) {
        throw new Error("Missing the required parameter 'namespaceIdOrName' when calling deleteNamespace");
      }
      var pathParams = {
        'namespace_id_or_name': namespaceIdOrName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/namespaces/{namespace_id_or_name}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete a namespace
     * Delete a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteNamespace",
    value: function deleteNamespace(namespaceIdOrName) {
      return this.deleteNamespaceWithHttpInfo(namespaceIdOrName).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Dyno>} and HTTP response
     */
  }, {
    key: "listDynosWithHttpInfo",
    value: function listDynosWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listDynos");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_Dyno["default"]];
      return this.apiClient.callApi('/api/v1/apps/{id}/dynos/list', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Dyno>}
     */
  }, {
    key: "listDynos",
    value: function listDynos(id) {
      return this.listDynosWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show namespace
     * Show a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Namespace} and HTTP response
     */
  }, {
    key: "namespaceWithHttpInfo",
    value: function namespaceWithHttpInfo(namespaceIdOrName) {
      var postBody = null;
      // verify the required parameter 'namespaceIdOrName' is set
      if (namespaceIdOrName === undefined || namespaceIdOrName === null) {
        throw new Error("Missing the required parameter 'namespaceIdOrName' when calling namespace");
      }
      var pathParams = {
        'namespace_id_or_name': namespaceIdOrName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Namespace["default"];
      return this.apiClient.callApi('/api/v1/namespaces/{namespace_id_or_name}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show namespace
     * Show a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Namespace}
     */
  }, {
    key: "namespace",
    value: function namespace(namespaceIdOrName) {
      return this.namespaceWithHttpInfo(namespaceIdOrName).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list all namespaces
     * List all namespaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Namespace>} and HTTP response
     */
  }, {
    key: "namespacesWithHttpInfo",
    value: function namespacesWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_Namespace["default"]];
      return this.apiClient.callApi('/api/v1/namespaces', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list all namespaces
     * List all namespaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Namespace>}
     */
  }, {
    key: "namespaces",
    value: function namespaces() {
      return this.namespacesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * restart all dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "restartAllDynosWithHttpInfo",
    value: function restartAllDynosWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartAllDynos");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/apps/{id}/dynos', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * restart all dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "restartAllDynos",
    value: function restartAllDynos(id) {
      return this.restartAllDynosWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * restart specific dynos
     * @param {String} id app id or name
     * @param {String} dyno dyno name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "restartDynosWithHttpInfo",
    value: function restartDynosWithHttpInfo(id, dyno) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartDynos");
      }
      // verify the required parameter 'dyno' is set
      if (dyno === undefined || dyno === null) {
        throw new Error("Missing the required parameter 'dyno' when calling restartDynos");
      }
      var pathParams = {
        'id': id,
        'dyno': dyno
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/apps/{id}/dynos/{dyno}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * restart specific dynos
     * @param {String} id app id or name
     * @param {String} dyno dyno name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "restartDynos",
    value: function restartDynos(id, dyno) {
      return this.restartDynosWithHttpInfo(id, dyno).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * set or update config-vars
     * @param {String} appIdOrName app id or name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} [requestBody] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "setConfigVarsWithHttpInfo",
    value: function setConfigVarsWithHttpInfo(appIdOrName, opts) {
      opts = opts || {};
      var postBody = opts['requestBody'];
      // verify the required parameter 'appIdOrName' is set
      if (appIdOrName === undefined || appIdOrName === null) {
        throw new Error("Missing the required parameter 'appIdOrName' when calling setConfigVars");
      }
      var pathParams = {
        'app_id_or_name': appIdOrName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/apps/{app_id_or_name}/config-vars', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * set or update config-vars
     * @param {String} appIdOrName app id or name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "setConfigVars",
    value: function setConfigVars(appIdOrName, opts) {
      return this.setConfigVarsWithHttpInfo(appIdOrName, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show team
     * Show a team
     * @param {String} id Team name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Team} and HTTP response
     */
  }, {
    key: "teamWithHttpInfo",
    value: function teamWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling team");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Team["default"];
      return this.apiClient.callApi('/api/v1/teams/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show team
     * Show a team
     * @param {String} id Team name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Team}
     */
  }, {
    key: "team",
    value: function team(id) {
      return this.teamWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list all teams
     * List all teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Team>} and HTTP response
     */
  }, {
    key: "teamsWithHttpInfo",
    value: function teamsWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearer', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_Team["default"]];
      return this.apiClient.callApi('/api/v1/teams', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list all teams
     * List all teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Team>}
     */
  }, {
    key: "teams",
    value: function teams() {
      return this.teamsWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();